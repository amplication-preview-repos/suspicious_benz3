/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TwitterAccount } from "./TwitterAccount";
import { TwitterAccountCountArgs } from "./TwitterAccountCountArgs";
import { TwitterAccountFindManyArgs } from "./TwitterAccountFindManyArgs";
import { TwitterAccountFindUniqueArgs } from "./TwitterAccountFindUniqueArgs";
import { CreateTwitterAccountArgs } from "./CreateTwitterAccountArgs";
import { UpdateTwitterAccountArgs } from "./UpdateTwitterAccountArgs";
import { DeleteTwitterAccountArgs } from "./DeleteTwitterAccountArgs";
import { AutoResponseFindManyArgs } from "../../autoResponse/base/AutoResponseFindManyArgs";
import { AutoResponse } from "../../autoResponse/base/AutoResponse";
import { TwitterAccountService } from "../twitterAccount.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TwitterAccount)
export class TwitterAccountResolverBase {
  constructor(
    protected readonly service: TwitterAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccount",
    action: "read",
    possession: "any",
  })
  async _twitterAccountsMeta(
    @graphql.Args() args: TwitterAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TwitterAccount])
  @nestAccessControl.UseRoles({
    resource: "TwitterAccount",
    action: "read",
    possession: "any",
  })
  async twitterAccounts(
    @graphql.Args() args: TwitterAccountFindManyArgs
  ): Promise<TwitterAccount[]> {
    return this.service.twitterAccounts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TwitterAccount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TwitterAccount",
    action: "read",
    possession: "own",
  })
  async twitterAccount(
    @graphql.Args() args: TwitterAccountFindUniqueArgs
  ): Promise<TwitterAccount | null> {
    const result = await this.service.twitterAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TwitterAccount)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccount",
    action: "create",
    possession: "any",
  })
  async createTwitterAccount(
    @graphql.Args() args: CreateTwitterAccountArgs
  ): Promise<TwitterAccount> {
    return await this.service.createTwitterAccount({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TwitterAccount)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccount",
    action: "update",
    possession: "any",
  })
  async updateTwitterAccount(
    @graphql.Args() args: UpdateTwitterAccountArgs
  ): Promise<TwitterAccount | null> {
    try {
      return await this.service.updateTwitterAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TwitterAccount)
  @nestAccessControl.UseRoles({
    resource: "TwitterAccount",
    action: "delete",
    possession: "any",
  })
  async deleteTwitterAccount(
    @graphql.Args() args: DeleteTwitterAccountArgs
  ): Promise<TwitterAccount | null> {
    try {
      return await this.service.deleteTwitterAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AutoResponse], { name: "autoResponses" })
  @nestAccessControl.UseRoles({
    resource: "AutoResponse",
    action: "read",
    possession: "any",
  })
  async findAutoResponses(
    @graphql.Parent() parent: TwitterAccount,
    @graphql.Args() args: AutoResponseFindManyArgs
  ): Promise<AutoResponse[]> {
    const results = await this.service.findAutoResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
