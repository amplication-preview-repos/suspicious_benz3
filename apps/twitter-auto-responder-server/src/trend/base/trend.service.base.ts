/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Trend as PrismaTrend,
  AutoResponse as PrismaAutoResponse,
} from "@prisma/client";

export class TrendServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TrendCountArgs, "select">): Promise<number> {
    return this.prisma.trend.count(args);
  }

  async trends(args: Prisma.TrendFindManyArgs): Promise<PrismaTrend[]> {
    return this.prisma.trend.findMany(args);
  }
  async trend(args: Prisma.TrendFindUniqueArgs): Promise<PrismaTrend | null> {
    return this.prisma.trend.findUnique(args);
  }
  async createTrend(args: Prisma.TrendCreateArgs): Promise<PrismaTrend> {
    return this.prisma.trend.create(args);
  }
  async updateTrend(args: Prisma.TrendUpdateArgs): Promise<PrismaTrend> {
    return this.prisma.trend.update(args);
  }
  async deleteTrend(args: Prisma.TrendDeleteArgs): Promise<PrismaTrend> {
    return this.prisma.trend.delete(args);
  }

  async findAutoResponses(
    parentId: string,
    args: Prisma.AutoResponseFindManyArgs
  ): Promise<PrismaAutoResponse[]> {
    return this.prisma.trend
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .autoResponses(args);
  }
}
