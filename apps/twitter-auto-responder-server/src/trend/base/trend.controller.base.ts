/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TrendService } from "../trend.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TrendCreateInput } from "./TrendCreateInput";
import { Trend } from "./Trend";
import { TrendFindManyArgs } from "./TrendFindManyArgs";
import { TrendWhereUniqueInput } from "./TrendWhereUniqueInput";
import { TrendUpdateInput } from "./TrendUpdateInput";
import { AutoResponseFindManyArgs } from "../../autoResponse/base/AutoResponseFindManyArgs";
import { AutoResponse } from "../../autoResponse/base/AutoResponse";
import { AutoResponseWhereUniqueInput } from "../../autoResponse/base/AutoResponseWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TrendControllerBase {
  constructor(
    protected readonly service: TrendService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Trend })
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTrend(@common.Body() data: TrendCreateInput): Promise<Trend> {
    return await this.service.createTrend({
      data: data,
      select: {
        createdAt: true,
        id: true,
        topic: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Trend] })
  @ApiNestedQuery(TrendFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async trends(@common.Req() request: Request): Promise<Trend[]> {
    const args = plainToClass(TrendFindManyArgs, request.query);
    return this.service.trends({
      ...args,
      select: {
        createdAt: true,
        id: true,
        topic: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Trend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async trend(
    @common.Param() params: TrendWhereUniqueInput
  ): Promise<Trend | null> {
    const result = await this.service.trend({
      where: params,
      select: {
        createdAt: true,
        id: true,
        topic: true,
        updatedAt: true,
        volume: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Trend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTrend(
    @common.Param() params: TrendWhereUniqueInput,
    @common.Body() data: TrendUpdateInput
  ): Promise<Trend | null> {
    try {
      return await this.service.updateTrend({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          topic: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Trend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTrend(
    @common.Param() params: TrendWhereUniqueInput
  ): Promise<Trend | null> {
    try {
      return await this.service.deleteTrend({
        where: params,
        select: {
          createdAt: true,
          id: true,
          topic: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/autoResponses")
  @ApiNestedQuery(AutoResponseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AutoResponse",
    action: "read",
    possession: "any",
  })
  async findAutoResponses(
    @common.Req() request: Request,
    @common.Param() params: TrendWhereUniqueInput
  ): Promise<AutoResponse[]> {
    const query = plainToClass(AutoResponseFindManyArgs, request.query);
    const results = await this.service.findAutoResponses(params.id, {
      ...query,
      select: {
        aiResponse: true,
        content: true,
        createdAt: true,
        id: true,
        mediaUrl: true,

        trend: {
          select: {
            id: true,
          },
        },

        twitterAccount: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/autoResponses")
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "update",
    possession: "any",
  })
  async connectAutoResponses(
    @common.Param() params: TrendWhereUniqueInput,
    @common.Body() body: AutoResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      autoResponses: {
        connect: body,
      },
    };
    await this.service.updateTrend({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/autoResponses")
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "update",
    possession: "any",
  })
  async updateAutoResponses(
    @common.Param() params: TrendWhereUniqueInput,
    @common.Body() body: AutoResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      autoResponses: {
        set: body,
      },
    };
    await this.service.updateTrend({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/autoResponses")
  @nestAccessControl.UseRoles({
    resource: "Trend",
    action: "update",
    possession: "any",
  })
  async disconnectAutoResponses(
    @common.Param() params: TrendWhereUniqueInput,
    @common.Body() body: AutoResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      autoResponses: {
        disconnect: body,
      },
    };
    await this.service.updateTrend({
      where: params,
      data,
      select: { id: true },
    });
  }
}
