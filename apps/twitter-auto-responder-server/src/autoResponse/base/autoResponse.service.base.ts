/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AutoResponse as PrismaAutoResponse,
  Trend as PrismaTrend,
  TwitterAccount as PrismaTwitterAccount,
} from "@prisma/client";

export class AutoResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AutoResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.autoResponse.count(args);
  }

  async autoResponses(
    args: Prisma.AutoResponseFindManyArgs
  ): Promise<PrismaAutoResponse[]> {
    return this.prisma.autoResponse.findMany(args);
  }
  async autoResponse(
    args: Prisma.AutoResponseFindUniqueArgs
  ): Promise<PrismaAutoResponse | null> {
    return this.prisma.autoResponse.findUnique(args);
  }
  async createAutoResponse(
    args: Prisma.AutoResponseCreateArgs
  ): Promise<PrismaAutoResponse> {
    return this.prisma.autoResponse.create(args);
  }
  async updateAutoResponse(
    args: Prisma.AutoResponseUpdateArgs
  ): Promise<PrismaAutoResponse> {
    return this.prisma.autoResponse.update(args);
  }
  async deleteAutoResponse(
    args: Prisma.AutoResponseDeleteArgs
  ): Promise<PrismaAutoResponse> {
    return this.prisma.autoResponse.delete(args);
  }

  async getTrend(parentId: string): Promise<PrismaTrend | null> {
    return this.prisma.autoResponse
      .findUnique({
        where: { id: parentId },
      })
      .trend();
  }

  async getTwitterAccount(
    parentId: string
  ): Promise<PrismaTwitterAccount | null> {
    return this.prisma.autoResponse
      .findUnique({
        where: { id: parentId },
      })
      .twitterAccount();
  }
}
